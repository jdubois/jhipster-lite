package {{packageName}}.technical.infrastructure.primary.exception;

import static org.springframework.http.MediaType.APPLICATION_PROBLEM_JSON_VALUE;
import static {{packageName}}.technical.infrastructure.primary.exception.ExceptionTranslatorTestController.TestDataDTO;

import org.hamcrest.Matchers;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
import org.springframework.context.ApplicationContext;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.test.web.reactive.server.WebTestClient;
import org.springframework.web.reactive.function.BodyInserters;
import org.springframework.web.server.ServerWebExchange;
import org.zalando.problem.Problem;
import org.zalando.problem.violations.ConstraintViolationProblem;
import org.zalando.problem.violations.Violation;
import {{packageName}}.IntegrationTest;

import java.net.URI;
import java.util.Collections;
import java.util.List;
import java.util.Map;

import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.Matchers.containsInAnyOrder;
import static org.springframework.http.MediaType.APPLICATION_PROBLEM_JSON_VALUE;
import static org.zalando.problem.Status.BAD_REQUEST;
import static {{packageName}}.technical.infrastructure.primary.exception.ExceptionTranslatorTestController.TestDataDTO;

/**
 * Integration tests {@link ExceptionTranslator} controller advice.
 */
@IntegrationTest
@AutoConfigureWebTestClient
class ExceptionTranslatorIT {

  @Autowired
  ApplicationContext applicationContext;

  @Autowired
  private WebTestClient webTestClient;

  @Autowired
  private ExceptionTranslator exceptionTranslator;

  @Test
  void shouldHandleMethodArgumentNotValid() {
    webTestClient
      .post()
      .uri("/api/exception-translator-test/method-argument")
      .body(BodyInserters.fromValue(new TestDataDTO()))
      .accept(MediaType.APPLICATION_JSON)
      .exchange()
      .expectStatus()
      .isBadRequest()
      .expectHeader()
      .contentType(APPLICATION_PROBLEM_JSON_VALUE)
      .expectBody()
      .jsonPath("$.title").isEqualTo("Data binding and validation failure")
      .jsonPath("$.message").isEqualTo(ErrorConstants.ERR_VALIDATION)
      .jsonPath("$.fieldErrors").value(Matchers.hasSize(2))
      .jsonPath("$.fieldErrors.[*].objectName").value(containsInAnyOrder("testDataDTOMono", "testDataDTOMono"))
      .jsonPath("$.fieldErrors.[*].field").value(containsInAnyOrder("fieldName", "validWithoutErrorMessage"))
      .jsonPath("$.fieldErrors.[*].message").value(containsInAnyOrder("must not be null", "AssertTrue"));
  }

  @Test
  void shouldHandleMissingServletRequestPartException() {
    webTestClient
      .get()
      .uri("/api/exception-translator-test/missing-servlet-request-part")
      .accept(MediaType.APPLICATION_JSON)
      .exchange()
      .expectStatus()
      .isBadRequest()
      .expectHeader()
      .contentType(MediaType.APPLICATION_PROBLEM_JSON)
      .expectBody()
      .jsonPath("$.message").isEqualTo("error.http.400")
      .jsonPath("$.title").isEqualTo("Bad Request")
      .jsonPath("$.detail").isEqualTo("400 BAD_REQUEST \"Required request part 'part' is not present\"");
  }

  @Test
  void shouldHandleMissingServletRequestParameterException() {
    webTestClient
      .get()
      .uri("/api/exception-translator-test/missing-servlet-request-parameter")
      .accept(MediaType.APPLICATION_JSON)
      .exchange()
      .expectStatus()
      .isBadRequest()
      .expectHeader()
      .contentType(MediaType.APPLICATION_PROBLEM_JSON)
      .expectBody()
      .jsonPath("$.message").isEqualTo("error.http.400")
      .jsonPath("$.title").isEqualTo("Bad Request")
      .jsonPath("$.detail").isEqualTo("400 BAD_REQUEST \"Required String parameter 'param' is not present\"");
  }

  @Test
  void shouldHandleCustomExceptionWithResponseStatusWithoutDetails() {
    webTestClient
      .get()
      .uri("/api/exception-translator-test/response-status")
      .accept(MediaType.APPLICATION_JSON)
      .exchange()
      .expectStatus()
      .isBadRequest()
      .expectHeader()
      .contentType(MediaType.APPLICATION_PROBLEM_JSON)
      .expectBody()
      .jsonPath("$.message").isEqualTo("error.http.400")
      .jsonPath("$.title").isEqualTo("test response status reason")
      .jsonPath("$.detail").doesNotExist();
  }

  @Test
  void shouldHandleInternalServerErrorWithoutDetails() {
    webTestClient
      .get()
      .uri("/api/exception-translator-test/internal-server-error")
      .accept(MediaType.APPLICATION_JSON)
      .exchange()
      .expectStatus()
      .isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR)
      .expectHeader()
      .contentType(MediaType.APPLICATION_PROBLEM_JSON)
      .expectBody()
      .jsonPath("$.message").isEqualTo("error.http.500")
      .jsonPath("$.title").isEqualTo("Internal Server Error")
      .jsonPath("$.detail").doesNotExist();
  }

  @Test
  void shouldHandleBadRequestErrorWithoutDetails() {
    webTestClient
      .get()
      .uri("/api/exception-translator-test/bad-request-error")
      .accept(MediaType.APPLICATION_JSON)
      .exchange()
      .expectStatus()
      .isBadRequest()
      .expectHeader()
      .contentType(MediaType.APPLICATION_PROBLEM_JSON)
      .expectBody()
      .jsonPath("$.message").isEqualTo("error.http.400")
      .jsonPath("$.title").isEqualTo("Bad request error")
      .jsonPath("$.detail").doesNotExist();
  }

  @Test
  void shouldHandleHttpMessageConversionException() {
    ReflectionTestUtils.setField(exceptionTranslator, "exceptionWithDetails", false);

    webTestClient
      .get()
      .uri("/api/exception-translator-test/http-message-conversion-exception")
      .accept(MediaType.APPLICATION_JSON)
      .exchange()
      .expectStatus()
      .isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR)
      .expectHeader()
      .contentType(MediaType.APPLICATION_PROBLEM_JSON)
      .expectBody()
      .jsonPath("$.message").isEqualTo("error.http.500")
      .jsonPath("$.title").isEqualTo("Internal Server Error")
      .jsonPath("$.detail").isEqualTo("Unable to convert http message");
  }

  @Test
  void shouldHandleHttpMessageConversionExceptionWithDetails() {
    ReflectionTestUtils.setField(exceptionTranslator, "exceptionWithDetails", true);

    webTestClient
      .get()
      .uri("/api/exception-translator-test/http-message-conversion-exception")
      .accept(MediaType.APPLICATION_JSON)
      .exchange()
      .expectStatus()
      .isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR)
      .expectHeader()
      .contentType(MediaType.APPLICATION_PROBLEM_JSON)
      .expectBody()
      .jsonPath("$.message").isEqualTo("error.http.500")
      .jsonPath("$.title").isEqualTo("Internal Server Error")
      .jsonPath("$.detail").isEqualTo("beer");
  }

  @Test
  void shouldHandleExceptionContainsPackageNameWithGenericDetail() {
    ReflectionTestUtils.setField(exceptionTranslator, "exceptionWithDetails", false);
    ReflectionTestUtils.setField(exceptionTranslator, "packages", List.of("org.", "java."));

    webTestClient
      .get()
      .uri("/api/exception-translator-test/null-pointer-exception")
      .accept(MediaType.APPLICATION_JSON)
      .exchange()
      .expectStatus()
      .isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR)
      .expectHeader()
      .contentType(MediaType.APPLICATION_PROBLEM_JSON)
      .expectBody()
      .jsonPath("$.message").isEqualTo("error.http.500")
      .jsonPath("$.title").isEqualTo("Internal Server Error")
      .jsonPath("$.detail").isEqualTo("Unexpected runtime exception");
  }

  @Test
  void shouldHandleExceptionContainsPackageNameWithNullPackagesWithDetail() {
    ReflectionTestUtils.setField(exceptionTranslator, "exceptionWithDetails", false);
    ReflectionTestUtils.setField(exceptionTranslator, "packages", null);

    webTestClient
      .get()
      .uri("/api/exception-translator-test/null-pointer-exception")
      .accept(MediaType.APPLICATION_JSON)
      .exchange()
      .expectStatus()
      .isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR)
      .expectHeader()
      .contentType(MediaType.APPLICATION_PROBLEM_JSON)
      .expectBody()
      .jsonPath("$.message").isEqualTo("error.http.500")
      .jsonPath("$.title").isEqualTo("Internal Server Error")
      .jsonPath("$.detail").isEqualTo("java.lang.NullPointerException");
  }

  @Test
  void shouldHandleExceptionContainsPackageNameWithEmptyPackagesWithDetail() {
    ReflectionTestUtils.setField(exceptionTranslator, "exceptionWithDetails", false);
    ReflectionTestUtils.setField(exceptionTranslator, "packages", List.of());

    webTestClient
      .get()
      .uri("/api/exception-translator-test/null-pointer-exception")
      .accept(MediaType.APPLICATION_JSON)
      .exchange()
      .expectStatus()
      .isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR)
      .expectHeader()
      .contentType(MediaType.APPLICATION_PROBLEM_JSON)
      .expectBody()
      .jsonPath("$.message").isEqualTo("error.http.500")
      .jsonPath("$.title").isEqualTo("Internal Server Error")
      .jsonPath("$.detail").isEqualTo("java.lang.NullPointerException");
  }

  @Test
  void shouldProcessConstraintViolationProblem() {
    // Given
    ServerHttpRequest serverHttpRequest = Mockito.mock(ServerHttpRequest.class);
    Mockito.when(serverHttpRequest.getURI()).thenReturn(URI.create("httpRequestUri"));
    ServerWebExchange request = Mockito.mock(ServerWebExchange.class);
    Mockito.when(request.getRequest()).thenReturn(serverHttpRequest);
    List<Violation> violations = List.of();
    ConstraintViolationProblem constraintViolationProblem = new ConstraintViolationProblem(BAD_REQUEST, violations);

    // When
    ResponseEntity<Problem> result = exceptionTranslator.process(ResponseEntity.badRequest().body(constraintViolationProblem), request)
      .block();

    // Then
    assertThat(result).isNotNull();
    assertThat(result.getStatusCode()).isEqualTo(HttpStatus.BAD_REQUEST);
    assertThat(result.getStatusCodeValue()).isEqualTo(400);
    Problem problem = result.getBody();
    assertThat(problem).isNotNull();
    assertThat(problem.getType()).isEqualTo(ConstraintViolationProblem.TYPE);
    assertThat(problem.getTitle()).isEqualTo("Constraint Violation");
    assertThat(problem.getParameters()).containsExactlyInAnyOrderEntriesOf(Map.of(
      "message", ErrorConstants.ERR_VALIDATION,
      "path", "httpRequestUri",
      "violations", Collections.emptyList()
    ));
  }

}
