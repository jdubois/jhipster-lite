package {{packageName}}.technical.infrastructure.primary.exception;

import javax.validation.Valid;
import javax.validation.constraints.AssertTrue;
import javax.validation.constraints.NotNull;
import org.springframework.http.HttpStatus;
import org.springframework.http.converter.HttpMessageConversionException;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import reactor.core.publisher.Mono;

@RestController
@RequestMapping("/api/exception-translator-test")
class ExceptionTranslatorTestController {

  @PostMapping("/method-argument")
  public Mono<TestDataDTO> methodArgument(@Valid @RequestBody Mono<TestDataDTO> testDataDTO) {
    return testDataDTO;
  }

  @GetMapping("/missing-servlet-request-part")
  public Mono<String> missingServletRequestPartException(@RequestPart String part) {
    return Mono.just(part);
  }

  @GetMapping("/missing-servlet-request-parameter")
  public Mono<String> missingServletRequestParameterException(@RequestParam String param) {
    return Mono.just(param);
  }

  @GetMapping("/response-status")
  public Mono<Void> exceptionWithResponseStatus() {
    throw new TestResponseStatusException();
  }

  @GetMapping("/internal-server-error")
  public Mono<Void> internalServerError() {
    throw new RuntimeException();
  }

  @GetMapping("/bad-request-error")
  public Mono<Void> badRequestError() {
    throw new BadRequestAlertException("Bad request error", "beer", "http.400");
  }

  @GetMapping("/null-pointer-exception")
  public Mono<Void> nullPointerException() {
    throw new NullPointerException("java.lang.NullPointerException");
  }

  @GetMapping("/http-message-conversion-exception")
  public Mono<Void> httpMessageConversionException() {
    throw new HttpMessageConversionException("beer");
  }

  @SuppressWarnings("unused")
  public static class TestDataDTO {

    @NotNull
    private String fieldName;

    public String getFieldName() {
      return fieldName;
    }

    public void setFieldName(String fieldName) {
      this.fieldName = fieldName;
    }

    @AssertTrue(message = "")
    public boolean isValidWithoutErrorMessage() {
      return false;
    }
  }

  @ResponseStatus(value = HttpStatus.BAD_REQUEST, reason = "test response status reason")
  public static class TestResponseStatusException extends RuntimeException {}
}
