package {{packageName}}.authentication.infrastructure.primary;

import static org.assertj.core.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import {{packageName}}.IntegrationTest;
import {{packageName}}.authentication.domain.Role;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentMatchers;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.context.request.RequestContextHolder;

@IntegrationTest
class CustomClaimConverterIT {

  private static final String USERNAME = "admin";
  private static final String NAME = "John";
  private static final String FAMILY_NAME = "Doe";
  private static final String FULL_NAME = NAME + " " + FAMILY_NAME;
  private static final String NAME_SUFFIX = "Sr.";
  private static final String EMAIL = "john.doe@gmail.com";

  private final ObjectMapper mapper = new ObjectMapper();

  @MockBean
  private RestTemplate restTemplate;

  @Autowired
  private ClientRegistrationRepository clientRegistrationRepository;

  private CustomClaimConverter customClaimConverter;

  @BeforeEach
  public void initTest() {
    customClaimConverter = new CustomClaimConverter(clientRegistrationRepository.findByRegistrationId("oidc"), restTemplate);
  }

  private void mockHttpGetUserInfo(ObjectNode userInfo) {
    when(
      restTemplate.exchange(
        eq("https://api.jhipster.org/user"),
        eq(HttpMethod.GET),
        any(HttpEntity.class),
        ArgumentMatchers.<Class<ObjectNode>>any()
      )
    )
      .thenReturn(ResponseEntity.ok(userInfo));
  }

  @Test
  void shouldConvertWithoutRequestAttributes() {
    try (MockedStatic<RequestContextHolder> request = Mockito.mockStatic(RequestContextHolder.class)) {
      request.when(RequestContextHolder::getRequestAttributes).thenReturn(null);

      Map<String, Object> claims = new HashMap<>();
      claims.put("sub", "123");
      Map<String, Object> convertedClaims = customClaimConverter.convert(claims);

      assertThat(convertedClaims).isNotEmpty().containsEntry("sub", "123");
    }
  }

  @Test
  void shouldConvertWithDifferentRequestAttributes() {
    try (MockedStatic<RequestContextHolder> request = Mockito.mockStatic(RequestContextHolder.class)) {
      FakeRequestAttributes attributes = new FakeRequestAttributes();
      request.when(RequestContextHolder::getRequestAttributes).thenReturn(attributes);

      Map<String, Object> claims = new HashMap<>();
      claims.put("sub", "123");
      Map<String, Object> convertedClaims = customClaimConverter.convert(claims);

      assertThat(convertedClaims).isNotEmpty().containsEntry("sub", "123");
    }
  }

  @Test
  void shouldConvert() {
    // GIVEN
    Map<String, Object> claims = new HashMap<>();
    claims.put("sub", "123");
    // AND
    ObjectNode user = mapper.createObjectNode();
    user.put("preferred_username", USERNAME);
    user.put("given_name", NAME);
    user.put("family_name", FAMILY_NAME);
    user.putArray("groups").add(Role.ADMIN.key()).add(Role.USER.key());
    mockHttpGetUserInfo(user);

    // WHEN
    Map<String, Object> convertedClaims = customClaimConverter.convert(claims);

    // THEN
    assertThat(convertedClaims)
      .containsEntry("sub", "123")
      .containsEntry("preferred_username", USERNAME)
      .containsEntry("given_name", NAME)
      .containsEntry("family_name", FAMILY_NAME)
      .containsEntry("groups", Arrays.asList(Role.ADMIN.key(), Role.USER.key()));
  }

  @Test
  void shouldConvertWithoutGroups() {
    // GIVEN
    Map<String, Object> claims = new HashMap<>();
    claims.put("sub", "123");
    // AND
    ObjectNode user = mapper.createObjectNode();
    user.put("preferred_username", USERNAME);
    user.put("given_name", NAME);
    user.put("family_name", FAMILY_NAME);
    mockHttpGetUserInfo(user);

    // WHEN
    assertThatCode(() -> customClaimConverter.convert(claims)).doesNotThrowAnyException();
  }

  @Test
  void shouldConvertWithNamespacedRoles() {
    // GIVEN
    Map<String, Object> claims = new HashMap<>();
    claims.put("sub", "123");
    // AND
    ObjectNode user = mapper.createObjectNode();
    user.put("preferred_username", USERNAME);
    user.put("given_name", NAME);
    user.put("family_name", FAMILY_NAME);
    user.putArray(Claims.CLAIMS_NAMESPACE + "roles").add(Role.ADMIN.key()).add(Role.USER.key());
    mockHttpGetUserInfo(user);

    // WHEN
    Map<String, Object> convertedClaims = customClaimConverter.convert(claims);

    // THEN
    assertThat(convertedClaims)
      .containsEntry("sub", "123")
      .containsEntry("preferred_username", USERNAME)
      .containsEntry("given_name", NAME)
      .containsEntry("family_name", FAMILY_NAME)
      .containsEntry("roles", Arrays.asList(Role.ADMIN.key(), Role.USER.key()));
  }

  @Test
  void shouldConvertWithoutFirstAndLastName() {
    // GIVEN
    Map<String, Object> claims = new HashMap<>();
    claims.put("sub", "123");
    // AND
    ObjectNode user = mapper.createObjectNode();
    user.put("preferred_username", USERNAME);
    mockHttpGetUserInfo(user);

    assertThatCode(() -> {
        Map<String, Object> convertedClaims = customClaimConverter.convert(claims);
        assertThat(convertedClaims).containsEntry("preferred_username", USERNAME).doesNotContainKeys("given_name", "family_name");
      })
      .doesNotThrowAnyException();
  }

  @Test
  void shouldConvertWithBlankName() {
    // GIVEN
    Map<String, Object> claims = new HashMap<>();
    claims.put("sub", "123");
    // AND
    ObjectNode user = mapper.createObjectNode();
    user.put("preferred_username", USERNAME);
    user.put("name", " ");
    mockHttpGetUserInfo(user);

    assertThatCode(() -> {
        Map<String, Object> convertedClaims = customClaimConverter.convert(claims);
        assertThat(convertedClaims).containsEntry("preferred_username", USERNAME).doesNotContainKeys("given_name", "family_name");
      })
      .doesNotThrowAnyException();
  }

  @Test
  void shouldConvertWithName() {
    // GIVEN
    Map<String, Object> claims = new HashMap<>();
    claims.put("sub", "123");
    // AND
    ObjectNode user = mapper.createObjectNode();
    user.put("preferred_username", USERNAME);
    user.put("name", FULL_NAME);
    mockHttpGetUserInfo(user);

    assertThatCode(() -> {
        Map<String, Object> convertedClaims = customClaimConverter.convert(claims);
        assertThat(convertedClaims)
          .containsEntry("preferred_username", USERNAME)
          .containsEntry("given_name", NAME)
          .containsEntry("family_name", FAMILY_NAME);
      })
      .doesNotThrowAnyException();
  }

  @Test
  void shouldConvertWithLastNameMultipleWords() {
    // GIVEN
    Map<String, Object> claims = new HashMap<>();
    claims.put("sub", "123");
    // AND
    ObjectNode user = mapper.createObjectNode();
    user.put("preferred_username", USERNAME);
    user.put("name", FULL_NAME + " " + NAME_SUFFIX);
    mockHttpGetUserInfo(user);

    assertThatCode(() -> {
        Map<String, Object> convertedClaims = customClaimConverter.convert(claims);
        System.out.println(convertedClaims);
        assertThat(convertedClaims)
          .containsEntry("preferred_username", USERNAME)
          .containsEntry("given_name", NAME)
          .containsEntry("family_name", FAMILY_NAME + " " + NAME_SUFFIX);
      })
      .doesNotThrowAnyException();
  }

  @Test
  void shouldConvertWithEmail() {
    // GIVEN
    Map<String, Object> claims = new HashMap<>();
    claims.put("sub", "123");
    // AND
    ObjectNode user = mapper.createObjectNode();
    user.put("preferred_username", USERNAME);
    user.put("email", EMAIL);
    mockHttpGetUserInfo(user);

    assertThatCode(() -> {
        Map<String, Object> convertedClaims = customClaimConverter.convert(claims);
        assertThat(convertedClaims).containsEntry("preferred_username", USERNAME).containsEntry("email", EMAIL);
      })
      .doesNotThrowAnyException();
  }

  @Test
  void shouldConvertWithoutUser() {
    // GIVEN
    Map<String, Object> claims = new HashMap<>();
    claims.put("sub", "123");
    // AND
    mockHttpGetUserInfo(null);

    assertThatCode(() -> {
        Map<String, Object> convertedClaims = customClaimConverter.convert(claims);
        assertThat(convertedClaims).doesNotContainKeys("preferred_username", "email");
      })
      .doesNotThrowAnyException();
  }
}
