package {{packageName}}.technical.infrastructure.primary.springdoc;

import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.ExternalDocumentation;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.security.OAuthFlow;
import io.swagger.v3.oas.models.security.OAuthFlows;
import io.swagger.v3.oas.models.security.SecurityRequirement;
import io.swagger.v3.oas.models.security.SecurityScheme;
import java.util.Arrays;
import org.springdoc.core.GroupedOpenApi;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class SpringdocConfiguration {

  @Value("${application.version:undefined}")
  private String version;

  @Value("${springdoc.oauth2.authorization-url}")
  private String authorizationUrl;

  @Bean
  public OpenAPI {{baseNameLowercase}}OpenAPI() {
    return new OpenAPI()
      .components(
        new Components()
          .addSecuritySchemes(
            "security_auth",
            new SecurityScheme()
              .type(SecurityScheme.Type.OAUTH2)
              .flows(new OAuthFlows().implicit(new OAuthFlow().authorizationUrl(authorizationUrl)))
          )
      )
      .addSecurityItem(new SecurityRequirement().addList("security_auth", Arrays.asList("jhipster")))
      .info(
        new Info()
          .title("{{apiTitle}}")
          .description("{{apiDescription}}")
          .version(version)
          .license(new License().name("{{apiLicenseName}}").url("{{apiLicenseUrl}}"))
      )
      .externalDocs(new ExternalDocumentation().description("{{apiExternalDocDescription}}").url("{{apiExternalDocUrl}}"));
  }

  @Bean
  public GroupedOpenApi {{baseNameLowercase}}AllOpenAPI() {
    // prettier-ignore
    return GroupedOpenApi.builder()
      .group("all")
      .pathsToMatch("/api/**")
      .build();
  }
}
