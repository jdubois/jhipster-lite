import ProjectRepository from '@/springboot/secondary/ProjectRepository';
import { AxiosHttp } from '@/http/AxiosHttp';
import router from '@/router';
import axios from 'axios';
import { createApp } from 'vue';
import App from '@/common/primary/app/App.vue';
import AngularRepository from '@/springboot/secondary/client/AngularRepository';
import ReactRepository from '@/springboot/secondary/client/ReactRepository';
import VueRepository from '@/springboot/secondary/client/VueRepository';
import SvelteRepository from '@/springboot/secondary/client/SvelteRepository';
import SpringBootRepository from './springboot/secondary/SpringBootRepository';
import ProjectHistoryRepository from '@/common/secondary/ProjectHistoryRepository';
import ConsoleLogger from '@/common/secondary/ConsoleLogger';
import { FileDownloader } from '@/common/primary/FileDownloader';
import { useHistoryStore } from '@/common/primary/HistoryStore';
import { useProjectStore } from '@/springboot/primary/ProjectStore';
import { createPinia } from 'pinia';
import piniaPersist from 'pinia-plugin-persist';
import { MittAlertBus } from '@/common/secondary/alert/MittAlertBus';
import mitt from 'mitt';

import 'bootstrap/dist/css/bootstrap.min.css';
import 'bootstrap-icons/font/bootstrap-icons.css';
import 'bootstrap';
import '../content/css/custom.css';
import { MittAlertListener } from '@/common/secondary/alert/MittAlertListener';
import { RestModulesRepository } from './module/secondary/RestModulesRepository';
import SetupRepository from '@/springboot/secondary/SetupRepository';
import ProjectFolderRepository from '@/springboot/secondary/ProjectFolderRepository';
import { RestProjectFoldersRepository } from '@/module/secondary/RestProjectFoldersRepository';

const app = createApp(App);
const pinia = createPinia();
pinia.use(piniaPersist);
app.use(pinia);

const emitter = mitt();
const alertBus = new MittAlertBus(emitter);
const alertListener = new MittAlertListener(emitter);
const axiosHttp = new AxiosHttp(axios.create({ baseURL: '' }));
const fileDownloader = new FileDownloader(window);
const consoleLogger = new ConsoleLogger(console);
const historyStore = useHistoryStore();
const projectStore = useProjectStore();
const projectHistoryRepository = new ProjectHistoryRepository(axiosHttp, historyStore);
const projectRepository = new ProjectRepository(axiosHttp, projectHistoryRepository, projectStore);
const projectFolderRepository = new ProjectFolderRepository(axiosHttp);
const angularRepository = new AngularRepository(axiosHttp, projectHistoryRepository);
const reactRepository = new ReactRepository(axiosHttp, projectHistoryRepository);
const springBootRepository = new SpringBootRepository(axiosHttp, projectHistoryRepository);
const setupRepository = new SetupRepository(axiosHttp, projectHistoryRepository);
const svelteRepository = new SvelteRepository(axiosHttp, projectHistoryRepository);
const vueRepository = new VueRepository(axiosHttp, projectHistoryRepository);
const modulesRepository = new RestModulesRepository(axiosHttp);
const projectFoldersRepository = new RestProjectFoldersRepository(axiosHttp);

app.provide('alertBus', alertBus);
app.provide('alertListener', alertListener);
app.provide('angularService', angularRepository);
app.provide('fileDownloader', fileDownloader);
app.provide('globalWindow', window);
app.provide('historyStore', historyStore);
app.provide('projectStore', projectStore);
app.provide('logger', consoleLogger);
app.provide('projectService', projectRepository);
app.provide('projectFolderService', projectFolderRepository);
app.provide('projectHistoryService', projectHistoryRepository);
app.provide('reactService', reactRepository);
app.provide('springBootService', springBootRepository);
app.provide('setupService', setupRepository);
app.provide('vueService', vueRepository);
app.provide('svelteService', svelteRepository);
app.provide('modules', modulesRepository);
app.provide('projectFolders', projectFoldersRepository);
app.use(router);

app.mount('#app');
