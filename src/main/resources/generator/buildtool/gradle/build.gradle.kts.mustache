plugins {
  java
  jacoco
}

java {
  toolchain {
    languageVersion.set(JavaLanguageVersion.of(17))
    vendor.set(JvmVendorSpec.ADOPTIUM)
  }
}

jacoco {
  toolVersion = "0.8.8"
}

repositories {
  mavenCentral()
  // jhipster-needle-gradle-repository
}

group = "{{packageName}}"
version = "0.0.1-SNAPSHOT"

ext {
  set("junit-jupiter.version", "5.8.2")
  set("assertj.version", "3.22.0")
  set("mockito.version", "4.2.0")
  // jhipster-needle-gradle-property
}

dependencies {
  // jhipster-needle-gradle-add-dependency
  testImplementation("org.junit.jupiter:junit-jupiter-engine:${property("junit-jupiter.version")}")
  testImplementation("org.junit.jupiter:junit-jupiter-params:${property("junit-jupiter.version")}")
  testImplementation("org.assertj:assertj-core:${property("assertj.version")}")
  testImplementation("org.mockito:mockito-junit-jupiter:${property("mockito.version")}")
  testImplementation("org.mockito:mockito-inline:${property("mockito.version")}")
  // jhipster-needle-gradle-add-dependency-test
}

tasks.test {
  filter {
    includeTestsMatching("*Test.*")
    excludeTestsMatching("*IntTest.*")
    excludeTestsMatching("*IT.*")
  }
  useJUnitPlatform()
}

val integrationTest = task<Test>("integrationTest") {
  description = "Runs integration tests."
  group = "verification"
  shouldRunAfter("test")
  filter {
    includeTestsMatching("*IntTest.*")
    includeTestsMatching("*IT.*")
    excludeTestsMatching("*Test.*")
  }
  useJUnitPlatform()
}
